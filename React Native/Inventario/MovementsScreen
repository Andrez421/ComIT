import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Modal,
  Alert,
  Image,
  ActivityIndicator,
  FlatList,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { 
  Ionicons,
  MaterialCommunityIcons,
  FontAwesome5,
  MaterialIcons,
  AntDesign,
  Feather 
} from '@expo/vector-icons';

const styles = StyleSheet.create({
  formGroup: {
    marginBottom: 15,
  },
  formLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    backgroundColor: '#f5f5f5',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: '#333',
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  typeSelector: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 15,
  },
  typeOption: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 10,
    marginHorizontal: 5,
    borderRadius: 8,
    backgroundColor: '#f5f5f5',
  },
  typeOptionText: {
    marginLeft: 5,
    fontSize: 14,
    fontWeight: '600',
    color: '#666',
  },
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    paddingTop: 60,
    paddingBottom: 20,
    paddingHorizontal: 20,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFF',
    marginBottom: 15,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255,255,255,0.2)',
    borderRadius: 10,
    paddingHorizontal: 10,
  },
  searchIcon: {
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    height: 40,
    color: '#FFF',
    fontSize: 16,
  },
  filterContainer: {
    paddingVertical: 15,
    paddingHorizontal: 10,
  },
  filterButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#FFF',
    marginHorizontal: 5,
    elevation: 2,
  },
  filterButtonActive: {
    backgroundColor: '#4ECDC4',
  },
  filterButtonText: {
    color: '#666',
    fontSize: 14,
    marginLeft: 5,
  },
  filterButtonTextActive: {
    color: '#FFF',
  },
  movementsList: {
    padding: 10,
  },
  movementCard: {
    backgroundColor: '#FFF',
    borderRadius: 15,
    padding: 15,
    marginBottom: 10,
    elevation: 3,
  },
  movementHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  typeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  typeText: {
    marginLeft: 5,
    fontSize: 16,
    fontWeight: '600',
  },
  statusBadge: {
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 15,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
  },
  movementInfo: {
    marginBottom: 10,
  },
  productName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  quantity: {
    fontSize: 14,
    color: '#666',
    marginBottom: 5,
  },
  date: {
    fontSize: 12,
    color: '#999',
  },
  movementDetails: {
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
    paddingTop: 10,
  },
  assignedTo: {
    fontSize: 14,
    color: '#666',
  },
  supplier: {
    fontSize: 14,
    color: '#666',
  },
  location: {
    fontSize: 14,
    color: '#666',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#FFF',
    borderRadius: 20,
    width: '90%',
    maxHeight: '80%',
    overflow: 'hidden',
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
  },
  modalTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFF',
    marginLeft: 10,
  },
  closeButton: {
    position: 'absolute',
    right: 15,
    top: 15,
    zIndex: 1,
  },
  modalScroll: {
    padding: 20,
  },
  modalSection: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  detailLabel: {
    fontSize: 14,
    color: '#666',
    marginLeft: 10,
    width: 100,
  },
  detailValue: {
    fontSize: 14,
    color: '#333',
    flex: 1,
  },
  notes: {
    fontSize: 14,
    color: '#666',
    backgroundColor: '#f9f9f9',
    padding: 10,
    borderRadius: 10,
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    padding: 20,
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
    elevation: 2,
  },
  editButton: {
    backgroundColor: '#4ECDC4',
  },
  cancelButton: {
    backgroundColor: '#FF6B6B',
  },
  actionButtonText: {
    color: '#FFF',
    marginLeft: 5,
    fontSize: 16,
  },
  fabButton: {
    position: 'absolute',
    right: 20,
    bottom: 20,
    backgroundColor: '#4ECDC4',
    width: 56,
    height: 56,
    borderRadius: 28,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
  },
});

// Datos de ejemplo para movimientos
const INITIAL_MOVEMENTS = [
  {
    id: 'm1',
    type: 'salida',
    productId: '1',
    productName: 'Router Cisco 2900',
    quantity: 2,
    assignedTo: 'Juan Pérez',
    projectName: 'Instalación Oficina Central',
    date: '2024-02-11 09:30',
    status: 'completado',
    notes: 'Instalación programada para el 12/02',
    serialNumbers: ['CSC2900-001A', 'CSC2900-001B'],
  },
  {
    id: 'm2',
    type: 'entrada',
    productId: '2',
    productName: 'Switch HP 1920',
    quantity: 5,
    supplier: 'HP Enterprise',
    orderNumber: 'PO-2024-001',
    date: '2024-02-10 14:15',
    status: 'verificado',
    notes: 'Pedido trimestral',
    serialNumbers: ['HP1920-002A', 'HP1920-002B', 'HP1920-002C', 'HP1920-002D', 'HP1920-002E'],
  },
  {
    id: 'm3',
    type: 'transferencia',
    productId: '3',
    productName: 'Fibra Óptica 50m',
    quantity: 20,
    fromLocation: 'Almacén A',
    toLocation: 'Almacén B',
    date: '2024-02-09 11:45',
    status: 'en_proceso',
    notes: 'Redistribución de inventario',
  },
];

const MOVEMENT_TYPES = {
  entrada: {
    color: '#4ECDC4',
    icon: 'login',
    label: 'Entrada',
    requiresSupplier: true,
    requiresOrderNumber: true,
  },
  salida: {
    color: '#FF6B6B',
    icon: 'logout',
    label: 'Salida',
    requiresAssignee: true,
    requiresProject: true,
  },
  transferencia: {
    color: '#6C5CE7',
    icon: 'swap-horizontal',
    label: 'Transferencia',
    requiresLocations: true,
  },
};

const STATUS_STYLES = {
  completado: {
    color: '#4ECDC4',
    backgroundColor: 'rgba(78, 205, 196, 0.1)',
    label: 'Completado',
  },
  en_proceso: {
    color: '#FFB900',
    backgroundColor: 'rgba(255, 185, 0, 0.1)',
    label: 'En Proceso',
  },
  verificado: {
    color: '#6C5CE7',
    backgroundColor: 'rgba(108, 92, 231, 0.1)',
    label: 'Verificado',
  },
  cancelado: {
    color: '#FF6B6B',
    backgroundColor: 'rgba(255, 107, 107, 0.1)',
    label: 'Cancelado',
  },
};

const MovementsScreen = () => {
  const [movements, setMovements] = useState(INITIAL_MOVEMENTS);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedMovement, setSelectedMovement] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [filterType, setFilterType] = useState('todos');
  const [loading, setLoading] = useState(false);
  const [newMovementModal, setNewMovementModal] = useState(false);
  const [newMovement, setNewMovement] = useState({
    type: 'entrada',
    productId: '',
    productName: '',
    quantity: 0,
    date: new Date().toISOString(),
    status: 'en_proceso',
    notes: '',
    serialNumbers: [],
  });

  const handleAddMovement = () => {
    if (!newMovement.productId || !newMovement.quantity) {
      Alert.alert('Error', 'Por favor complete todos los campos requeridos');
      return;
    }

    const movementToAdd = {
      ...newMovement,
      id: `m${Date.now()}`,
      date: new Date().toLocaleString(),
    };

    setMovements(prev => [movementToAdd, ...prev]);
    setNewMovementModal(false);
    setNewMovement({
      type: 'entrada',
      productId: '',
      productName: '',
      quantity: 0,
      date: new Date().toISOString(),
      status: 'en_proceso',
      notes: '',
      serialNumbers: [],
    });
  };

  const handleDeleteMovement = (movementId) => {
    Alert.alert(
      'Confirmar Eliminación',
      '¿Está seguro de que desea eliminar este movimiento?',
      [
        {
          text: 'Cancelar',
          style: 'cancel',
        },
        {
          text: 'Eliminar',
          style: 'destructive',
          onPress: () => {
            setMovements(prev => prev.filter(m => m.id !== movementId));
          },
        },
      ]
    );
  };

  const validateMovement = (movement) => {
    const type = MOVEMENT_TYPES[movement.type];
    if (type.requiresSupplier && !movement.supplier) return false;
    if (type.requiresAssignee && !movement.assignedTo) return false;
    if (type.requiresLocations && (!movement.fromLocation || !movement.toLocation)) return false;
    return true;
  };

  const filteredMovements = movements.filter(movement => {
    const matchesSearch = 
      movement.productName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      movement.id.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesType = filterType === 'todos' || movement.type === filterType;
    return matchesSearch && matchesType;
  });

  const MovementCard = ({ movement }) => (
    <TouchableOpacity 
      style={styles.movementCard}
      onPress={() => {
        setSelectedMovement(movement);
        setModalVisible(true);
      }}
    >
      <View style={styles.movementHeader}>
        <View style={styles.typeContainer}>
          <MaterialCommunityIcons 
            name={MOVEMENT_TYPES[movement.type].icon}
            size={24}
            color={MOVEMENT_TYPES[movement.type].color}
          />
          <Text style={[styles.typeText, { color: MOVEMENT_TYPES[movement.type].color }]}>
            {MOVEMENT_TYPES[movement.type].label}
          </Text>
        </View>
        <View style={[
          styles.statusBadge,
          { backgroundColor: STATUS_STYLES[movement.status].backgroundColor }
        ]}>
          <Text style={[
            styles.statusText,
            { color: STATUS_STYLES[movement.status].color }
          ]}>
            {STATUS_STYLES[movement.status].label}
          </Text>
        </View>
      </View>

      <View style={styles.movementInfo}>
        <Text style={styles.productName}>{movement.productName}</Text>
        <Text style={styles.quantity}>Cantidad: {movement.quantity}</Text>
        <Text style={styles.date}>{movement.date}</Text>
      </View>

      <View style={styles.movementDetails}>
        {movement.type === 'salida' && (
          <Text style={styles.assignedTo}>Asignado a: {movement.assignedTo}</Text>
        )}
        {movement.type === 'entrada' && (
          <Text style={styles.supplier}>Proveedor: {movement.supplier}</Text>
        )}
        {movement.type === 'transferencia' && (
          <Text style={styles.location}>
            {movement.fromLocation} → {movement.toLocation}
          </Text>
        )}
      </View>
    </TouchableOpacity>
  );

  const MovementModal = ({ movement, visible, onClose }) => {
    if (!movement) return null;
  
    const movementType = MOVEMENT_TYPES[movement.type] || MOVEMENT_TYPES.entrada;
  
    return (
      <Modal
        animationType="slide"
        transparent={true}
        visible={visible}
        onRequestClose={onClose}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <TouchableOpacity style={styles.closeButton} onPress={onClose}>
              <AntDesign name="closecircle" size={24} color="#FF6B6B" />
            </TouchableOpacity>
  
            <View style={[
              styles.modalHeader,
              { backgroundColor: movementType.color }
            ]}>
              <MaterialCommunityIcons 
                name={movementType.icon}
                size={32}
                color="#FFF"
              />
              <Text style={styles.modalTitle}>
                {movementType.label}
              </Text>
            </View>
  
            <ScrollView style={styles.modalScroll}>
              <View style={styles.modalSection}>
                <Text style={styles.sectionTitle}>Información del Producto</Text>
                <DetailRow icon="box" label="Producto" value={movement?.productName} />
                <DetailRow icon="hash" label="ID Movimiento" value={movement?.id} />
                <DetailRow icon="package" label="Cantidad" value={movement?.quantity.toString()} />
              </View>
  
              <View style={styles.modalSection}>
                <Text style={styles.sectionTitle}>Detalles del Movimiento</Text>
                <DetailRow icon="calendar" label="Fecha" value={movement?.date} />
                <DetailRow 
                  icon="info" 
                  label="Estado" 
                  value={STATUS_STYLES[movement?.status]?.label}
                  valueColor={STATUS_STYLES[movement?.status]?.color}
                />
                {movement?.type === 'salida' && (
                  <>
                    <DetailRow icon="user" label="Asignado a" value={movement?.assignedTo} />
                    <DetailRow icon="briefcase" label="Proyecto" value={movement?.projectName} />
                  </>
                )}
                {movement?.type === 'entrada' && (
                  <>
                    <DetailRow icon="truck" label="Proveedor" value={movement?.supplier} />
                    <DetailRow icon="file-text" label="Orden #" value={movement?.orderNumber} />
                  </>
                )}
                {movement?.type === 'transferencia' && (
                  <>
                    <DetailRow icon="map-pin" label="Desde" value={movement?.fromLocation} />
                    <DetailRow icon="map-pin" label="Hasta" value={movement?.toLocation} />
                  </>
                )}
              </View>
  
              {movement?.serialNumbers && (
                <View style={styles.modalSection}>
                  <Text style={styles.sectionTitle}>Números de Serie</Text>
                  {movement.serialNumbers.map((serial, index) => (
                    <DetailRow 
                      key={index}
                      icon="cpu"
                      label={`Serie ${index + 1}`}
                      value={serial}
                    />
                  ))}
                </View>
              )}
  
              {movement?.notes && (
                <View style={styles.modalSection}>
                  <Text style={styles.sectionTitle}>Notas</Text>
                  <Text style={styles.notes}>{movement.notes}</Text>
                </View>
              )}
            </ScrollView>
  
            <View style={styles.modalActions}>
              <TouchableOpacity 
                style={[styles.actionButton, styles.editButton]}
                onPress={() => Alert.alert('Editar', 'Función de edición')}
              >
                <MaterialIcons name="edit" size={20} color="#FFF" />
                <Text style={styles.actionButtonText}>Editar</Text>
              </TouchableOpacity>
              {movement?.status !== 'cancelado' && (
                <TouchableOpacity 
                  style={[styles.actionButton, styles.cancelButton]}
                  onPress={() => Alert.alert('Cancelar', '¿Desea cancelar este movimiento?')}
                >
                  <MaterialIcons name="cancel" size={20} color="#FFF" />
                  <Text style={styles.actionButtonText}>Cancelar</Text>
                </TouchableOpacity>
              )}
            </View>
          </View>
        </View>
      </Modal>
    );
  };

  const DetailRow = ({ icon, label, value, valueColor }) => (
    <View style={styles.detailRow}>
      <Feather name={icon} size={16} color="#666" />
      <Text style={styles.detailLabel}>{label}:</Text>
      <Text style={[styles.detailValue, valueColor && { color: valueColor }]}>
        {value}
      </Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <LinearGradient
        colors={['#4ECDC4', '#2BAD96']}
        style={styles.header}
      >
        <Text style={styles.headerTitle}>Movimientos</Text>
        <View style={styles.searchContainer}>
          <Ionicons name="search" size={24} color="#FFF" style={styles.searchIcon} />
          <TextInput
            style={styles.searchInput}
            placeholder="Buscar por producto o ID..."
            placeholderTextColor="#FFF"
            value={searchQuery}
            onChangeText={setSearchQuery}
          />
        </View>
      </LinearGradient>

      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        style={styles.filterContainer}
      >
        <TouchableOpacity
          style={[
            styles.filterButton,
            filterType === 'todos' && styles.filterButtonActive
          ]}
          onPress={() => setFilterType('todos')}
        >
          <Text style={[
            styles.filterButtonText,
            filterType === 'todos' && styles.filterButtonTextActive
          ]}>
            Todos
          </Text>
        </TouchableOpacity>
        {Object.entries(MOVEMENT_TYPES).map(([key, value]) => (
          <TouchableOpacity
            key={key}
            style={[
              styles.filterButton,
              filterType === key && styles.filterButtonActive
            ]}
            onPress={() => setFilterType(key)}
          >
            <MaterialCommunityIcons 
              name={value.icon}
              size={20}
              color={filterType === key ? '#FFF' : '#666'}
            />
            <Text style={[
              styles.filterButtonText,
              filterType === key && styles.filterButtonTextActive
            ]}>
              {value.label}
            </Text>
          </TouchableOpacity>
        ))}
      </ScrollView>

      <FlatList
        data={filteredMovements}
        renderItem={({ item }) => <MovementCard movement={item} />}
        keyExtractor={item => item.id}
        contentContainerStyle={styles.movementsList}
        showsVerticalScrollIndicator={false}
      />

      <MovementModal 
        movement={selectedMovement}
        visible={modalVisible}
        onClose={() => {
          setModalVisible(false);
          setSelectedMovement(null);
        }}
      />      
      
      <Modal
        animationType="slide"
        transparent={true}
        visible={newMovementModal}
        onRequestClose={() => setNewMovementModal(false)}
      >
        <View style={styles.modalContainer}>
          <View style={[styles.modalContent, { height: '80%' }]}>
            <TouchableOpacity 
              style={styles.closeButton} 
              onPress={() => setNewMovementModal(false)}
            >
              <AntDesign name="closecircle" size={24} color="#FF6B6B" />
            </TouchableOpacity>

            <View style={[styles.modalHeader, { backgroundColor: '#4ECDC4' }]}>
              <Text style={styles.modalTitle}>Nuevo Movimiento</Text>
            </View>

            <ScrollView style={styles.modalScroll}>
              <View style={styles.formGroup}>
                <Text style={styles.formLabel}>Tipo de Movimiento</Text>
                <View style={styles.typeSelector}>
                  {Object.entries(MOVEMENT_TYPES).map(([key, value]) => (
                    <TouchableOpacity
                      key={key}
                      style={[
                        styles.typeOption,
                        newMovement.type === key && { backgroundColor: value.color }
                      ]}
                      onPress={() => setNewMovement(prev => ({ ...prev, type: key }))}
                    >
                      <MaterialCommunityIcons 
                        name={value.icon}
                        size={24}
                        color={newMovement.type === key ? '#FFF' : '#666'}
                      />
                      <Text style={[
                        styles.typeOptionText,
                        newMovement.type === key && { color: '#FFF' }
                      ]}>
                        {value.label}
                      </Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </View>

              <View style={styles.formGroup}>
                <Text style={styles.formLabel}>Producto</Text>
                <TextInput
                  style={styles.input}
                  placeholder="Nombre del producto"
                  value={newMovement.productName}
                  onChangeText={(text) => setNewMovement(prev => ({
                    ...prev,
                    productName: text
                  }))}
                />
              </View>

              <View style={styles.formGroup}>
                <Text style={styles.formLabel}>Cantidad</Text>
                <TextInput
                  style={styles.input}
                  placeholder="Cantidad"
                  keyboardType="numeric"
                  value={newMovement.quantity.toString()}
                  onChangeText={(text) => setNewMovement(prev => ({
                    ...prev,
                    quantity: parseInt(text) || 0
                  }))}
                />
              </View>

              {newMovement.type === 'entrada' && (
                <>
                  <View style={styles.formGroup}>
                    <Text style={styles.formLabel}>Proveedor</Text>
                    <TextInput
                      style={styles.input}
                      placeholder="Nombre del proveedor"
                      value={newMovement.supplier}
                      onChangeText={(text) => setNewMovement(prev => ({
                        ...prev,
                        supplier: text
                      }))}
                    />
                  </View>
                  <View style={styles.formGroup}>
                    <Text style={styles.formLabel}>Número de Orden</Text>
                    <TextInput
                      style={styles.input}
                      placeholder="# de Orden"
                      value={newMovement.orderNumber}
                      onChangeText={(text) => setNewMovement(prev => ({
                        ...prev,
                        orderNumber: text
                      }))}
                    />
                  </View>
                </>
              )}

              {newMovement.type === 'salida' && (
                <>
                  <View style={styles.formGroup}>
                    <Text style={styles.formLabel}>Asignado a</Text>
                    <TextInput
                      style={styles.input}
                      placeholder="Nombre del técnico"
                      value={newMovement.assignedTo}
                      onChangeText={(text) => setNewMovement(prev => ({
                        ...prev,
                        assignedTo: text
                      }))}
                    />
                  </View>
                  <View style={styles.formGroup}>
                    <Text style={styles.formLabel}>Proyecto</Text>
                    <TextInput
                      style={styles.input}
                      placeholder="Nombre del proyecto"
                      value={newMovement.projectName}
                      onChangeText={(text) => setNewMovement(prev => ({
                        ...prev,
                        projectName: text
                      }))}
                    />
                  </View>
                </>
              )}

              {newMovement.type === 'transferencia' && (
                <>
                  <View style={styles.formGroup}>
                    <Text style={styles.formLabel}>Desde</Text>
                    <TextInput
                      style={styles.input}
                      placeholder="Ubicación origen"
                      value={newMovement.fromLocation}
                      onChangeText={(text) => setNewMovement(prev => ({
                        ...prev,
                        fromLocation: text
                      }))}
                    />
                  </View>
                  <View style={styles.formGroup}>
                    <Text style={styles.formLabel}>Hasta</Text>
                    <TextInput
                      style={styles.input}
                      placeholder="Ubicación destino"
                      value={newMovement.toLocation}
                      onChangeText={(text) => setNewMovement(prev => ({
                        ...prev,
                        toLocation: text
                      }))}
                    />
                  </View>
                </>
              )}

              <View style={styles.formGroup}>
                <Text style={styles.formLabel}>Notas</Text>
                <TextInput
                  style={[styles.input, styles.textArea]}
                  placeholder="Notas adicionales"
                  multiline
                  numberOfLines={4}
                  value={newMovement.notes}
                  onChangeText={(text) => setNewMovement(prev => ({
                    ...prev,
                    notes: text
                  }))}
                />
              </View>
            </ScrollView>

            <View style={styles.modalActions}>
              <TouchableOpacity 
                style={[styles.actionButton, styles.cancelButton]}
                onPress={() => setNewMovementModal(false)}
              >
                <Text style={styles.actionButtonText}>Cancelar</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={[styles.actionButton, styles.editButton]}
                onPress={handleAddMovement}
              >
                <Text style={styles.actionButtonText}>Guardar</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      <TouchableOpacity 
        style={styles.fabButton}
        onPress={() => setNewMovementModal(true)}
      >
        <AntDesign name="plus" size={24} color="#FFF" />
      </TouchableOpacity>
    </View>
  );
};

export default MovementsScreen;