import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Dimensions,
  RefreshControl,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import {
  MaterialCommunityIcons,
  Ionicons,
  FontAwesome5,
} from '@expo/vector-icons';

const { width } = Dimensions.get('window');

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    paddingTop: 60,
    paddingBottom: 20,
    paddingHorizontal: 20,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFF',
    marginBottom: 5,
  },
  headerSubtitle: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.8)',
  },
  statsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    padding: 15,
    justifyContent: 'space-between',
  },
  statCard: {
    width: (width - 45) / 2,
    backgroundColor: '#FFF',
    borderRadius: 15,
    padding: 15,
    marginBottom: 15,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
  },
  statTitle: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  statValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginHorizontal: 15,
    marginTop: 20,
    marginBottom: 10,
  },
  chartContainer: {
    backgroundColor: '#FFF',
    margin: 15,
    padding: 15,
    borderRadius: 15,
    elevation: 3,
  },
  chartTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 10,
  },
  alertsContainer: {
    margin: 15,
  },
  alertCard: {
    backgroundColor: '#FFF',
    borderRadius: 15,
    padding: 15,
    marginBottom: 10,
    flexDirection: 'row',
    alignItems: 'center',
    elevation: 2,
  },
  alertIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 10,
  },
  alertContent: {
    flex: 1,
  },
  alertTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  alertDescription: {
    fontSize: 14,
    color: '#666',
  },
  trendContainer: {
    backgroundColor: '#FFF',
    margin: 15,
    padding: 15,
    borderRadius: 15,
    elevation: 3,
  },
  trendHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  trendTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  trendPeriod: {
    fontSize: 14,
    color: '#666',
  },
  trendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
  },
  trendInfo: {
    flex: 1,
    marginLeft: 10,
  },
  trendName: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333',
    marginBottom: 4,
  },
  trendStats: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  trendValue: {
    fontSize: 14,
    color: '#666',
    marginRight: 8,
  },
  trendChange: {
    fontSize: 12,
    color: '#4CAF50',
  },
  progressBar: {
    height: 4,
    backgroundColor: '#f0f0f0',
    borderRadius: 2,
    marginTop: 8,
  },
  progressFill: {
    height: '100%',
    borderRadius: 2,
  },
});

const DashboardScreen = () => {
  const [refreshing, setRefreshing] = useState(false);
  const [stats, setStats] = useState({
    totalProducts: 342,
    lowStock: 15,
    pendingOrders: 8,
    activeProjects: 12,
  });

  const [stockAlerts, setStockAlerts] = useState([
    {
      id: 1,
      title: 'Stock Bajo',
      description: 'Router Cisco 2900 - 2 unidades restantes',
      type: 'warning',
    },
    {
      id: 2,
      title: 'Pedido Pendiente',
      description: 'Fibra Óptica 50m - Llegada estimada: 2 días',
      type: 'info',
    },
    {
      id: 3,
      title: 'Stock Crítico',
      description: 'Access Point Ubiquiti - Sin stock',
      type: 'error',
    },
  ]);

  const [trends, setTrends] = useState([
    {
      id: 1,
      name: 'Router Cisco 2900',
      usage: 85,
      change: '+12%',
      color: '#4CAF50',
    },
    {
      id: 2,
      name: 'Switch HP 1920',
      usage: 65,
      change: '+8%',
      color: '#2196F3',
    },
    {
      id: 3,
      name: 'Fibra Óptica 50m',
      usage: 45,
      change: '-5%',
      color: '#FF5722',
    },
  ]);

  const onRefresh = React.useCallback(() => {
    setRefreshing(true);
    // Aquí iría la lógica para recargar los datos
    setTimeout(() => {
      setRefreshing(false);
    }, 2000);
  }, []);

  const getAlertColor = (type) => {
    switch (type) {
      case 'warning':
        return '#FFB900';
      case 'error':
        return '#FF6B6B';
      case 'info':
        return '#4ECDC4';
      default:
        return '#666';
    }
  };

  return (
    <View style={styles.container}>
      <LinearGradient
        colors={['#4ECDC4', '#2BAD96']}
        style={styles.header}
      >
        <Text style={styles.headerTitle}>Dashboard</Text>
        <Text style={styles.headerSubtitle}>Resumen de Inventario</Text>
      </LinearGradient>

      <ScrollView
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Text style={styles.statTitle}>Total Productos</Text>
            <Text style={styles.statValue}>{stats.totalProducts}</Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statTitle}>Stock Bajo</Text>
            <Text style={[styles.statValue, { color: '#FF6B6B' }]}>
              {stats.lowStock}
            </Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statTitle}>Pedidos Pendientes</Text>
            <Text style={[styles.statValue, { color: '#FFB900' }]}>
              {stats.pendingOrders}
            </Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statTitle}>Proyectos Activos</Text>
            <Text style={[styles.statValue, { color: '#4CAF50' }]}>
              {stats.activeProjects}
            </Text>
          </View>
        </View>

        <Text style={styles.sectionTitle}>Alertas de Stock</Text>
        <View style={styles.alertsContainer}>
          {stockAlerts.map((alert) => (
            <View key={alert.id} style={styles.alertCard}>
              <View
                style={[
                  styles.alertIcon,
                  { backgroundColor: `${getAlertColor(alert.type)}20` },
                ]}
              >
                <MaterialCommunityIcons
                  name={
                    alert.type === 'warning'
                      ? 'alert'
                      : alert.type === 'error'
                      ? 'alert-circle'
                      : 'information'
                  }
                  size={24}
                  color={getAlertColor(alert.type)}
                />
              </View>
              <View style={styles.alertContent}>
                <Text style={styles.alertTitle}>{alert.title}</Text>
                <Text style={styles.alertDescription}>{alert.description}</Text>
              </View>
            </View>
          ))}
        </View>

        <Text style={styles.sectionTitle}>Tendencias de Uso</Text>
        <View style={styles.trendContainer}>
          <View style={styles.trendHeader}>
            <Text style={styles.trendTitle}>Productos más utilizados</Text>
            <Text style={styles.trendPeriod}>Últimos 30 días</Text>
          </View>
          {trends.map((trend) => (
            <View key={trend.id} style={styles.trendItem}>
              <MaterialCommunityIcons
                name="trending-up"
                size={24}
                color={trend.color}
              />
              <View style={styles.trendInfo}>
                <Text style={styles.trendName}>{trend.name}</Text>
                <View style={styles.trendStats}>
                  <Text style={styles.trendValue}>{trend.usage}% utilización</Text>
                  <Text
                    style={[
                      styles.trendChange,
                      {
                        color: trend.change.includes('+')
                          ? '#4CAF50'
                          : '#FF5722',
                      },
                    ]}
                  >
                    {trend.change}
                  </Text>
                </View>
                <View style={styles.progressBar}>
                  <View
                    style={[
                      styles.progressFill,
                      {
                        width: `${trend.usage}%`,
                        backgroundColor: trend.color,
                      },
                    ]}
                  />
                </View>
              </View>
            </View>
          ))}
        </View>
      </ScrollView>
    </View>
  );
};

export default DashboardScreen;