import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Modal,
  Alert,
  Image,
  ActivityIndicator,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { 
  Ionicons,
  MaterialCommunityIcons,
  FontAwesome5,
  MaterialIcons,
  AntDesign 
} from '@expo/vector-icons';

// Datos de ejemplo
const INITIAL_INVENTORY = [
  {
    id: '1',
    name: 'Router Cisco 2900',
    category: 'Routers',
    stock: 15,
    minStock: 5,
    serialNumber: 'CSC2900-001',
    location: 'Almacén A',
    price: 299.99,
    supplier: 'Cisco Systems',
    lastUpdated: '2024-02-11',
    image: 'https://api.a0.dev/assets/image?text=cisco%20enterprise%20router%20professional%20photo&aspect=1:1'
  },
  {
    id: '2',
    name: 'Switch HP 1920',
    category: 'Switches',
    stock: 8,
    minStock: 10,
    serialNumber: 'HP1920-002',
    location: 'Almacén B',
    price: 199.99,
    supplier: 'HP Enterprise',
    lastUpdated: '2024-02-10',
    image: 'https://api.a0.dev/assets/image?text=network%20switch%20professional%20equipment&aspect=1:1'
  },
  {
    id: '3',
    name: 'Fibra Óptica 50m',
    category: 'Cables',
    stock: 100,
    minStock: 20,
    serialNumber: 'FO50M-003',
    location: 'Almacén A',
    price: 45.99,
    supplier: 'FiberTech',
    lastUpdated: '2024-02-09',
    image: 'https://api.a0.dev/assets/image?text=fiber%20optic%20cable%20roll&aspect=1:1'
  },
];

const CATEGORIES = [
  'Todos',
  'Routers',
  'Switches',
  'Access Points',
  'Cables',
  'Herramientas',
  'Repuestos'
];

const InventoryScreen = () => {
  const [inventory, setInventory] = useState(INITIAL_INVENTORY);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('Todos');
  const [selectedItem, setSelectedItem] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [sortOrder, setSortOrder] = useState('name'); // 'name', 'stock', 'category'

  const filteredInventory = inventory.filter(item => {
    const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         item.serialNumber.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === 'Todos' || item.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const sortInventory = (items) => {
    return [...items].sort((a, b) => {
      switch (sortOrder) {
        case 'name':
          return a.name.localeCompare(b.name);
        case 'stock':
          return b.stock - a.stock;
        case 'category':
          return a.category.localeCompare(b.category);
        default:
          return 0;
      }
    });
  };

  const handleStockChange = (id, increment) => {
    setInventory(prev => prev.map(item => {
      if (item.id === id) {
        const newStock = item.stock + (increment ? 1 : -1);
        if (newStock < 0) {
          Alert.alert('Error', 'El stock no puede ser negativo');
          return item;
        }
        if (newStock <= item.minStock) {
          Alert.alert('Alerta', `Stock bajo para ${item.name}`);
        }
        return { ...item, stock: newStock };
      }
      return item;
    }));
  };

  const InventoryItem = ({ item }) => (
    <TouchableOpacity 
      style={[
        styles.itemCard,
        item.stock <= item.minStock && styles.lowStockCard
      ]}
      onPress={() => {
        setSelectedItem(item);
        setModalVisible(true);
      }}
    >
      <Image
        source={{ uri: item.image }}
        style={styles.itemImage}
        resizeMode="cover"
      />
      <View style={styles.itemInfo}>
        <Text style={styles.itemName}>{item.name}</Text>
        <Text style={styles.itemCategory}>{item.category}</Text>
        <View style={styles.stockContainer}>
          <Text style={[
            styles.stockText,
            item.stock <= item.minStock && styles.lowStockText
          ]}>
            Stock: {item.stock}
          </Text>
          <View style={styles.stockControls}>
            <TouchableOpacity 
              style={styles.stockButton}
              onPress={() => handleStockChange(item.id, false)}
            >
              <AntDesign name="minuscircleo" size={24} color="#FF6B6B" />
            </TouchableOpacity>
            <TouchableOpacity 
              style={styles.stockButton}
              onPress={() => handleStockChange(item.id, true)}
            >
              <AntDesign name="pluscircleo" size={24} color="#4ECDC4" />
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </TouchableOpacity>
  );

  const ItemModal = ({ item, visible, onClose }) => (
    <Modal
      animationType="slide"
      transparent={true}
      visible={visible}
      onRequestClose={onClose}
    >
      <View style={styles.modalContainer}>
        <View style={styles.modalContent}>
          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <AntDesign name="closecircle" size={24} color="#FF6B6B" />
          </TouchableOpacity>
          
          <Image
            source={{ uri: item?.image }}
            style={styles.modalImage}
            resizeMode="cover"
          />
          
          <Text style={styles.modalTitle}>{item?.name}</Text>
          <View style={styles.modalDetails}>
            <DetailRow icon="barcode" label="Serial" value={item?.serialNumber} />
            <DetailRow icon="tag" label="Categoría" value={item?.category} />
            <DetailRow icon="warehouse" label="Ubicación" value={item?.location} />
            <DetailRow icon="dollar-sign" label="Precio" value={`$${item?.price}`} />
            <DetailRow icon="truck" label="Proveedor" value={item?.supplier} />
            <DetailRow icon="calendar" label="Última actualización" value={item?.lastUpdated} />
          </View>
          
          <View style={styles.modalActions}>
            <TouchableOpacity style={[styles.modalButton, styles.editButton]}>
              <MaterialIcons name="edit" size={20} color="#FFF" />
              <Text style={styles.modalButtonText}>Editar</Text>
            </TouchableOpacity>
            <TouchableOpacity style={[styles.modalButton, styles.historyButton]}>
              <MaterialIcons name="history" size={20} color="#FFF" />
              <Text style={styles.modalButtonText}>Historial</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );

  const DetailRow = ({ icon, label, value }) => (
    <View style={styles.detailRow}>
      <FontAwesome5 name={icon} size={16} color="#666" />
      <Text style={styles.detailLabel}>{label}:</Text>
      <Text style={styles.detailValue}>{value}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <LinearGradient
        colors={['#4ECDC4', '#2BAD96']}
        style={styles.header}
      >
        <Text style={styles.headerTitle}>Inventario</Text>
        <View style={styles.searchContainer}>
          <Ionicons name="search" size={24} color="#FFF" style={styles.searchIcon} />
          <TextInput
            style={styles.searchInput}
            placeholder="Buscar por nombre o número de serie..."
            placeholderTextColor="#FFF"
            value={searchQuery}
            onChangeText={setSearchQuery}
          />
        </View>
      </LinearGradient>

      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        style={styles.categoriesContainer}
      >
        {CATEGORIES.map((category) => (
          <TouchableOpacity
            key={category}
            style={[
              styles.categoryButton,
              selectedCategory === category && styles.categoryButtonActive
            ]}
            onPress={() => setSelectedCategory(category)}
          >
            <Text style={[
              styles.categoryButtonText,
              selectedCategory === category && styles.categoryButtonTextActive
            ]}>
              {category}
            </Text>
          </TouchableOpacity>
        ))}
      </ScrollView>

      <View style={styles.sortContainer}>
        <Text style={styles.sortLabel}>Ordenar por:</Text>
        <TouchableOpacity 
          style={[styles.sortButton, sortOrder === 'name' && styles.sortButtonActive]}
          onPress={() => setSortOrder('name')}
        >
          <Text style={styles.sortButtonText}>Nombre</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={[styles.sortButton, sortOrder === 'stock' && styles.sortButtonActive]}
          onPress={() => setSortOrder('stock')}
        >
          <Text style={styles.sortButtonText}>Stock</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={[styles.sortButton, sortOrder === 'category' && styles.sortButtonActive]}
          onPress={() => setSortOrder('category')}
        >
          <Text style={styles.sortButtonText}>Categoría</Text>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.inventoryList}>
        {loading ? (
          <ActivityIndicator size="large" color="#4ECDC4" style={styles.loader} />
        ) : (
          sortInventory(filteredInventory).map((item) => (
            <InventoryItem key={item.id} item={item} />
          ))
        )}
      </ScrollView>

      <ItemModal 
        item={selectedItem}
        visible={modalVisible}
        onClose={() => {
          setModalVisible(false);
          setSelectedItem(null);
        }}
      />

      <TouchableOpacity 
        style={styles.fabButton}
        onPress={() => Alert.alert('Nuevo', 'Agregar nuevo producto')}
      >
        <AntDesign name="plus" size={24} color="#FFF" />
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    paddingTop: 60,
    paddingBottom: 20,
    paddingHorizontal: 20,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFF',
    marginBottom: 15,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255,255,255,0.2)',
    borderRadius: 10,
    paddingHorizontal: 10,
  },
  searchIcon: {
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    height: 40,
    color: '#FFF',
    fontSize: 16,
  },
  categoriesContainer: {
    paddingVertical: 15,
    paddingHorizontal: 10,
  },
  categoryButton: {
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#FFF',
    marginHorizontal: 5,
    elevation: 2,
  },
  categoryButtonActive: {
    backgroundColor: '#4ECDC4',
  },
  categoryButtonText: {
    color: '#666',
    fontSize: 14,
    fontWeight: '600',
  },
  categoryButtonTextActive: {
    color: '#FFF',
  },
  sortContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingVertical: 10,
  },
  sortLabel: {
    color: '#666',
    marginRight: 10,
  },
  sortButton: {
    paddingHorizontal: 15,
    paddingVertical: 5,
    borderRadius: 15,
    backgroundColor: '#FFF',
    marginHorizontal: 5,
  },
  sortButtonActive: {
    backgroundColor: '#4ECDC4',
  },
  sortButtonText: {
    color: '#666',
    fontSize: 12,
  },
  inventoryList: {
    flex: 1,
    padding: 10,
  },
  itemCard: {
    backgroundColor: '#FFF',
    borderRadius: 15,
    marginBottom: 10,
    elevation: 3,
    flexDirection: 'row',
    overflow: 'hidden',
  },
  lowStockCard: {
    borderColor: '#FF6B6B',
    borderWidth: 1,
  },
  itemImage: {
    width: 100,
    height: 100,
  },
  itemInfo: {
    flex: 1,
    padding: 10,
  },
  itemName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  itemCategory: {
    fontSize: 14,
    color: '#666',
    marginTop: 5,
  },
  stockContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 10,
  },
  stockText: {
    fontSize: 14,
    color: '#333',
  },
  lowStockText: {
    color: '#FF6B6B',
    fontWeight: 'bold',
  },
  stockControls: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  stockButton: {
    padding: 5,
    marginHorizontal: 5,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#FFF',
    borderRadius: 20,
    padding: 20,
    width: '90%',
    maxHeight: '80%',
  },
  closeButton: {
    position: 'absolute',
    right: 15,
    top: 15,
    zIndex: 1,
  },
  modalImage: {
    width: '100%',
    height: 200,
    borderRadius: 10,
    marginBottom: 15,
  },
  modalTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  modalDetails: {
    marginBottom: 20,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  detailLabel: {
    fontSize: 14,
    color: '#666',
    marginLeft: 10,
    width: 120,
  },
  detailValue: {
    fontSize: 14,
    color: '#333',
    flex: 1,
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  modalButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
    elevation: 2,
  },
  editButton: {
    backgroundColor: '#4ECDC4',
  },
  historyButton: {
    backgroundColor: '#6C5CE7',
  },
  modalButtonText: {
    color: '#FFF',
    marginLeft: 5,
    fontSize: 16,
  },
  fabButton: {
    position: 'absolute',
    right: 20,
    bottom: 20,
    backgroundColor: '#4ECDC4',
    width: 56,
    height: 56,
    borderRadius: 28,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
  },
  loader: {
    marginTop: 50,
  },
});

export default InventoryScreen;